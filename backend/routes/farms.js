const express = require('express');
const router = express.Router();
const Farm = require('../models/Farm'); // Import Farm Model
const authMiddleware = require('../middleware/authMiddleware'); // Middleware x√°c th·ª±c

// ‚ûï T·∫°o c∆° s·ªü g√¢y nu√¥i m·ªõi (ch·ªâ admin c√≥ th·ªÉ t·∫°o)
router.post('/', authMiddleware, async (req, res) => {
  // Ki·ªÉm tra vai tr√≤ c·ªßa ng∆∞·ªùi d√πng n·∫øu c·∫ßn (ch·ªâ admin m·ªõi ƒë∆∞·ª£c t·∫°o)
  if (req.user.role !== 'admin') {
    return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' });
  }

  try {
    const newFarm = new Farm(req.body);
    await newFarm.save();
    res.status(201).json(newFarm);
  } catch (err) {
    console.error('POST /api/farms error:', err);
    res.status(500).json({ message: 'L·ªói server khi t·∫°o c∆° s·ªü g√¢y nu√¥i', error: err.message });
  }
});

// üîé L·∫•y to√†n b·ªô danh s√°ch c∆° s·ªü g√¢y nu√¥i (c√≥ th·ªÉ cho staff v√† admin)
router.get('/', authMiddleware, async (req, res) => {
  try {
    const farms = await Farm.find();
    res.json(farms);
  } catch (err) {
    console.error('GET /api/farms error:', err);
    res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch c∆° s·ªü g√¢y nu√¥i', error: err.message });
  }
});

// üîé L·∫•y th√¥ng tin m·ªôt c∆° s·ªü nu√¥i theo ID (ƒê√ÇY L√Ä ROUTE B·ªä THI·∫æU!)
router.get('/:id', authMiddleware, async (req, res) => {
  console.log('Backend: ƒê√£ nh·∫≠n y√™u c·∫ßu GET farm theo ID.'); // D√≤ng log b·∫°n ƒë√£ th√™m
  console.log('Backend: ID ƒë∆∞·ª£c nh·∫≠n t·ª´ request:', req.params.id); // D√≤ng log b·∫°n ƒë√£ th√™m
  try {
    const farm = await Farm.findById(req.params.id); // T√¨m b·∫±ng _id
    console.log('Backend: K·∫øt qu·∫£ Farm.findById():', farm); // D√≤ng log b·∫°n ƒë√£ th√™m
    if (!farm) {
      console.log('Backend: Kh√¥ng t√¨m th·∫•y farm v·ªõi ID n√†y. Tr·∫£ v·ªÅ 404.'); // D√≤ng log b·∫°n ƒë√£ th√™m
      return res.status(404).json({ message: 'Farm not found' });
    }
    res.json(farm);
  } catch (err) {
    console.error('Backend: L·ªói trong route GET /api/farms/:id:', err);
    if (err.kind === 'ObjectId') {
        return res.status(400).json({ message: 'ID c∆° s·ªü nu√¥i kh√¥ng h·ª£p l·ªá.' });
    }
    res.status(500).json({ message: 'L·ªói server khi l·∫•y th√¥ng tin c∆° s·ªü nu√¥i.' });
  }
});

// ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin c∆° s·ªü g√¢y nu√¥i theo ID (ch·ªâ admin)
router.put('/:id', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') {
    return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' });
  }
  try {
    const updatedFarm = await Farm.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true } // `new: true` tr·∫£ v·ªÅ b·∫£n ghi ƒë√£ c·∫≠p nh·∫≠t, `runValidators: true` ch·∫°y l·∫°i c√°c validator trong schema
    );
    if (!updatedFarm) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y c∆° s·ªü g√¢y nu√¥i ƒë·ªÉ c·∫≠p nh·∫≠t' });
    }
    res.json(updatedFarm);
  } catch (err) {
    console.error('PUT /api/farms/:id error:', err);
    res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t c∆° s·ªü g√¢y nu√¥i', error: err.message });
  }
});

// ‚ùå X√≥a c∆° s·ªü g√¢y nu√¥i (ch·ªâ admin)
router.delete('/:id', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') {
    return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' });
  }
  try {
    const deletedFarm = await Farm.findByIdAndDelete(req.params.id);
    if (!deletedFarm) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y c∆° s·ªü g√¢y nu√¥i ƒë·ªÉ x√≥a' });
    }
    res.json({ message: 'X√≥a c∆° s·ªü g√¢y nu√¥i th√†nh c√¥ng' });
  } catch (err) {
    console.error('DELETE /api/farms/:id error:', err);
    res.status(500).json({ message: 'L·ªói server khi x√≥a c∆° s·ªü g√¢y nu√¥i', error: err.message });
  }
});

module.exports = router;