import React, { useEffect, useState } from 'react';
import axios from 'axios';


const UserListPage = () => {
    // --- State c·ªßa trang ---
    const [users, setUsers] = useState([]);
    const [editingUser, setEditingUser] = useState(null);
    const [isCreating, setIsCreating] = useState(false);
    const token = localStorage.getItem('token');

    // --- State qu·∫£n l√Ω t·∫£i v√† l·ªói ---
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    // --- State cho form v√† ƒë∆°n v·ªã h√†nh ch√≠nh ---
    const [formData, setFormData] = useState({
        email: '', password: '', displayName: '', employeeId: '', role: 'staff', province: '', communes: [],
    });
    const [provinces, setProvinces] = useState([]);
    const [communesList, setCommunesList] = useState([]);
    const [selectedCommune, setSelectedCommune] = useState('');

    const apiHeaders = { headers: { Authorization: `Bearer ${token}` } };
    const API_URL = process.env.REACT_APP_API_URL || '';

    // --- T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu ---
    useEffect(() => {
        const fetchInitialData = async () => {
            if (!token) {
                setError('Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n.');
                setIsLoading(false);
				console.log('üì¶ Danh s√°ch ng∆∞·ªùi d√πng:', users);
                return;
            }

            setIsLoading(true);
            setError(null);

            try {
                const [usersRes, provincesRes] = await Promise.all([
                    axios.get(`${API_URL}/api/users`, apiHeaders),
                    axios.get(`${API_URL}/api/master-product-list/provinces`, apiHeaders)
                ]);
               console.log("D·ªØ li·ªáu ng∆∞·ªùi d√πng:", usersRes.data); // üëà TH√äM LOG 
                setUsers(usersRes.data);
                setProvinces(provincesRes.data);

            } catch (err) {
                console.error('L·ªói khi t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu:', err);
                if (err.response && (err.response.status === 401 || err.response.status === 403)) {
                    setError('Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
                } else {
                    setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ m√°y ch·ªß. L·ªói: ' + (err.response?.data?.message || err.message));
                }
            } finally {
                setIsLoading(false);
            }
        };

        fetchInitialData();
    }, [token, API_URL]);
    
    // --- T·∫£i danh s√°ch x√£ khi t·ªânh thay ƒë·ªïi ---
    useEffect(() => {
        const fetchCommunes = async () => {
            if (formData.province && token) {
                try {
                    const res = await axios.get(`${API_URL}/api/master-product-list/communes?provinceCode=${formData.province}`, apiHeaders);
                    setCommunesList(res.data);
                } catch (err) {
                    console.error('L·ªói khi t·∫£i danh s√°ch x√£:', err);
                    setCommunesList([]);
                }
            } else {
                setCommunesList([]);
            }
        };
        fetchCommunes();
    }, [formData.province, token, API_URL]);
    
    // --- TH√äM M·ªöI: ƒêi·ªÅn d·ªØ li·ªáu v√†o form khi b·∫•m n√∫t "S·ª≠a" ---
    useEffect(() => {
        if (editingUser) {
            setFormData({
                email: editingUser.email || '',
                password: '', // Lu√¥n ƒë·ªÉ tr·ªëng m·∫≠t kh·∫©u khi s·ª≠a, ch·ªâ nh·∫≠p n·∫øu mu·ªën ƒë·ªïi
                displayName: editingUser.displayName || '',
                employeeId: editingUser.employeeId || '',
                role: editingUser.role || 'staff',
                province: editingUser.province || '',
                communes: editingUser.communes || [],
            });
        }
    }, [editingUser]);

    // --- C√°c h√†m x·ª≠ l√Ω kh√°c ---
    const resetFormState = () => {
        setFormData({
            email: '', password: '', displayName: '', employeeId: '', role: 'staff', province: '', communes: [],
        });
        setSelectedCommune('');
        setCommunesList([]);
    };

    const handleChange = (e) => {
        const { name, value } = e.target;
        if (name === 'province') {
            setFormData((prev) => ({ ...prev, [name]: value, communes: [] }));
        } else {
            setFormData((prev) => ({ ...prev, [name]: value }));
        }
    };

    const handleAddCommune = () => {
        if (selectedCommune && !formData.communes.includes(selectedCommune)) {
            setFormData(prev => ({ ...prev, communes: [...prev.communes, selectedCommune] }));
            setSelectedCommune('');
        }
    };

    const handleRemoveCommune = (communeToRemove) => {
        setFormData(prev => ({ ...prev, communes: prev.communes.filter(c => c !== communeToRemove) }));
    };

    // --- C·∫¨P NH·∫¨T: T·ªëi ∆∞u h√≥a logic Th√™m v√† S·ª≠a ng∆∞·ªùi d√πng ---
    const handleSubmit = async (e) => {
        e.preventDefault();
        
        const dataToSend = { ...formData };
        // N·∫øu ƒëang s·ª≠a v√† kh√¥ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi, h√£y x√≥a tr∆∞·ªùng password kh·ªèi d·ªØ li·ªáu g·ª≠i ƒëi
        if (editingUser && !dataToSend.password) {
            delete dataToSend.password;
        }

        try {
            if (editingUser) {
                // Logic S·ª¨A: D√πng PUT v√† c·∫≠p nh·∫≠t user trong state
                const { data: updatedUser } = await axios.put(`${API_URL}/api/users/${editingUser._id}`, dataToSend, apiHeaders);
                setUsers(users.map(u => (u._id === updatedUser._id ? updatedUser : u)));
            } else {
                // Logic T·∫†O M·ªöI: D√πng POST v√† th√™m user m·ªõi v√†o state
                const { data: newUser } = await axios.post(`${API_URL}/api/users`, dataToSend, apiHeaders);
                setUsers(prevUsers => [...prevUsers, newUser]);
            }
            handleCancel(); // Reset form v√† ƒë√≥ng l·∫°i
        } catch (err) {
            console.error('L·ªói khi l∆∞u ng∆∞·ªùi d√πng:', err);
            alert('L·ªói khi l∆∞u ng∆∞·ªùi d√πng: ' + (err.response?.data?.message || err.message));
        }
    };

    // --- C·∫¨P NH·∫¨T: T·ªëi ∆∞u h√≥a logic X√≥a ng∆∞·ªùi d√πng ---
    const handleDelete = async (id) => {
        if (!window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën xo√° ng∆∞·ªùi d√πng n√†y?')) return;
        try {
            await axios.delete(`${API_URL}/api/users/${id}`, apiHeaders);
            // C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c b·∫±ng c√°ch l·ªçc user ƒë√£ x√≥a kh·ªèi state
            setUsers(prevUsers => prevUsers.filter(user => user._id !== id));
        } catch (err) {
            console.error('L·ªói khi xo√° ng∆∞·ªùi d√πng:', err);
            alert('L·ªói khi xo√° ng∆∞·ªùi d√πng: ' + (err.response?.data?.message || err.message));
        }
    };
    
    const handleEdit = (user) => {
        setEditingUser(user); 
    };
    const handleAddNew = () => { setIsCreating(true); setEditingUser(null); resetFormState(); };
    const handleCancel = () => { setIsCreating(false); setEditingUser(null); resetFormState(); };

    if (isLoading) {
        return <div className="user-list-container"><h2>ƒêang t·∫£i d·ªØ li·ªáu...</h2></div>;
    }

    if (error) {
        return <div className="user-list-container error-message"><h2>L·ªói: {error}</h2></div>;
    }

    return (
        <div className="user-list-container">
            <div className="header">
                <h2>üë§ Qu·∫£n l√Ω ng∆∞·ªùi d√πng</h2>
                <button className="btn btn-primary" onClick={handleAddNew}>+ Th√™m ng∆∞·ªùi d√πng</button>
            </div>

            {(isCreating || editingUser) && (
                <div className="form-container">
                    <h3>{editingUser ? 'Ch·ªânh s·ª≠a ng∆∞·ªùi d√πng' : 'T·∫°o ng∆∞·ªùi d√πng m·ªõi'}</h3>
                    <form onSubmit={handleSubmit}>
                        <div>
                            <label>Email</label>
                            <input type="email" name="email" value={formData.email} onChange={handleChange} required />
                        </div>
                        <div>
                            <label>M·∫≠t kh·∫©u</label>
                            <input type="password" name="password" value={formData.password} onChange={handleChange} placeholder={editingUser ? 'ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng ƒë·ªïi' : ''} required={!editingUser} />
                        </div>
                        <div>
                            <label>H·ªç t√™n</label>
                            <input type="text" name="displayName" value={formData.displayName} onChange={handleChange} required />
                        </div>
                         <div>
                            <label>M√£ nh√¢n vi√™n</label>
                            <input type="text" name="employeeId" value={formData.employeeId} onChange={handleChange} />
                        </div>
                        <div>
                            <label>Vai tr√≤</label>
                            <select name="role" value={formData.role} onChange={handleChange}>
                                <option value="staff">Nh√¢n vi√™n (Staff)</option>
                                <option value="manager">Qu·∫£n l√Ω (Manager)</option>
                                <option value="admin">Qu·∫£n tr·ªã (Admin)</option>
                            </select>
                        </div>
                        <div>
                            <label>T·ªânh/Th√†nh ph·ªë</label>
                            <select name="province" value={formData.province} onChange={handleChange} required>
                                <option value="">-- Ch·ªçn T·ªânh/Th√†nh ph·ªë --</option>
                                {Array.isArray(provinces) && provinces.map((p) => (
                                    <option key={p.code} value={p.code}>{p.name}</option>
                                ))}
                            </select>
                        </div>
                        <div>
                            <label>Danh s√°ch x√£ qu·∫£n l√Ω</label>
                            <div className="input-group">
                                <select value={selectedCommune} onChange={(e) => setSelectedCommune(e.target.value)} disabled={!formData.province}>
                                    <option value="">-- Ch·ªçn X√£/Ph∆∞·ªùng --</option>
                                    {Array.isArray(communesList) && communesList.map((c) => (
                                        <option key={c.code} value={c.name}>{c.name}</option>
                                    ))}
                                </select>
                                <button type="button" className="btn" onClick={handleAddCommune} disabled={!selectedCommune}>Th√™m</button>
                            </div>
                            <div className="tags-container">
                                {Array.isArray(formData.communes) && formData.communes.map((commune, index) => (
                                    <span key={`${commune}-${index}`} className="tag">
                                        {commune}
                                        <button type="button" onClick={() => handleRemoveCommune(commune)}>&times;</button>
                                    </span>
                                ))}
                            </div>
                        </div>
                        <div className="form-actions">
                            <button type="submit" className="btn btn-success">{editingUser ? 'L∆∞u thay ƒë·ªïi' : 'T·∫°o m·ªõi'}</button>
                            <button type="button" className="btn-cancel" onClick={handleCancel}>Hu·ª∑</button>
                        </div>
                    </form>
                </div>
            )}

            <div className="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Email</th><th>T√™n</th><th>Vai tr√≤</th><th>T·ªânh</th><th>X√£</th><th>M√£ NV</th><th>H√†nh ƒë·ªông</th>
                        </tr>
                    </thead>
                    <tbody>
                        {Array.isArray(users) && users.map((user) => (
                            <tr key={user._id}>
                                <td>{user.email}</td>
                                <td>{user.displayName}</td>
                                <td>{user.role}</td>
                                <td>{provinces.find(p => p.code === user.province)?.name || user.province || '-'}</td>
                                <td>{Array.isArray(user.communes) ? user.communes.join(', ') : ''}</td>
                                <td>{user.employeeId || '-'}</td>
                                <td>
                                    <button onClick={() => handleEdit(user)} className="btn-edit">S·ª≠a</button>
                                    <button onClick={() => handleDelete(user._id)} className="btn-delete">Xo√°</button>
                                </td>
                            </tr>
                        ))}
                        {users.length === 0 && (
                            <tr><td colSpan="7">Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o.</td></tr>
                        )}
                    </tbody>
                </table>
            </div>
        </div>
    );
};

export default UserListPage;
