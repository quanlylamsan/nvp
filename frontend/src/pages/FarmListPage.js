// src/pages/FarmListPage.js
import React, { useEffect, useState, useCallback } from 'react';
import axios from 'axios';
import './FarmListPage.css';
import { useNavigate } from 'react-router-dom';

function FarmListPage() {
  const [farms, setFarms] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedFarmType, setSelectedFarmType] = useState('all');

  // --- NEW: State ƒë·ªÉ qu·∫£n l√Ω ph√¢n trang ---
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  const navigate = useNavigate();

  // D√πng useCallback ƒë·ªÉ tr√°nh t·∫°o l·∫°i h√†m fetchFarms m·ªói l·∫ßn render
  const fetchFarms = useCallback(async (currentPage) => {
    setLoading(true);
    setError(null);
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setError('B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p.');
        setLoading(false);
        navigate('/login');
        return;
      }

      // T·∫°o tham s·ªë query cho API
      const params = {
        page: currentPage,
        limit: 10 // Ho·∫∑c s·ªë l∆∞·ª£ng b·∫°n mu·ªën tr√™n m·ªói trang
      };
      if (selectedFarmType !== 'all') {
        params.farmType = selectedFarmType;
      }

      const response = await axios.get('http://localhost:10000/api/farms', {
        headers: { Authorization: `Bearer ${token}` },
        params: params
      });

      // --- FIX: ƒê·ªçc d·ªØ li·ªáu t·ª´ response.data.docs theo ƒë√∫ng c·∫•u tr√∫c c·ªßa backend ---
      if (response.data && Array.isArray(response.data.docs)) {
        setFarms(response.data.docs);
        setTotalPages(response.data.totalPages); // C·∫≠p nh·∫≠t t·ªïng s·ªë trang
        setPage(response.data.page); // C·∫≠p nh·∫≠t trang hi·ªán t·∫°i
      } else {
        setError('D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ server kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.');
        setFarms([]);
      }

    } catch (err) {
      console.error('L·ªói khi l·∫•y danh s√°ch farms:', err.response?.data || err.message);
      if (err.response && err.response.status === 401) {
        setError('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        localStorage.removeItem('token');
        navigate('/login');
      } else {
        setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch c∆° s·ªü.');
      }
      setFarms([]);
    } finally {
      setLoading(false);
    }
  }, [selectedFarmType, navigate]);

  // useEffect ƒë·ªÉ fetch d·ªØ li·ªáu khi trang ho·∫∑c b·ªô l·ªçc thay ƒë·ªïi
  useEffect(() => {
    fetchFarms(page);
  }, [page, fetchFarms]);

  // --- FIX: S·ª≠a l·∫°i t√™n tr∆∞·ªùng cho ƒë√∫ng v·ªõi d·ªØ li·ªáu ---
  const filteredFarms = farms.filter(farm =>
    searchTerm === '' ||
    (farm.tenCoSo && farm.tenCoSo.toLowerCase().includes(searchTerm.toLowerCase())) ||
    (farm.diaChiCoSo && farm.diaChiCoSo.toLowerCase().includes(searchTerm.toLowerCase())) || // diaChi -> diaChiCoSo
    (farm.tenNguoiDaiDien && farm.tenNguoiDaiDien.toLowerCase().includes(searchTerm.toLowerCase())) // tenChuCoSo -> tenNguoiDaiDien
  );

  // --- NEW: H√†m x·ª≠ l√Ω chuy·ªÉn trang ---
  const handlePageChange = (newPage) => {
    if (newPage > 0 && newPage <= totalPages) {
      setPage(newPage);
    }
  };


  if (loading) {
    return <div className="farm-list-container">ƒêang t·∫£i danh s√°ch c∆° s·ªü...</div>;
  }

  if (error) {
    return <div className="farm-list-container error-message">L·ªói: {error}</div>;
  }

  return (
    <div className="farm-list-container">
      <h2>üìã Danh s√°ch c∆° s·ªü</h2>

      <div className="filter-controls">
        <input
          type="text"
          placeholder="T√¨m ki·∫øm theo t√™n c∆° s·ªü, ƒë·ªãa ch·ªâ, ng∆∞·ªùi ƒë·∫°i di·ªán..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="search-input"
        />
        <select
          value={selectedFarmType}
          onChange={(e) => {
            setSelectedFarmType(e.target.value);
            setPage(1); // Reset v·ªÅ trang 1 khi thay ƒë·ªïi b·ªô l·ªçc
          }}
          className="type-filter-select"
        >
          <option value="all">T·∫•t c·∫£ lo·∫°i h√¨nh</option>
          <option value="ƒêƒÉng k√Ω c∆° s·ªü g√¢y nu√¥i">C∆° s·ªü g√¢y nu√¥i</option>
          <option value="ƒêƒÉng k√Ω c∆° s·ªü kinh doanh, ch·∫ø bi·∫øn g·ªó">C∆° s·ªü kinh doanh, ch·∫ø bi·∫øn g·ªó</option>
        </select>
      </div>

      {filteredFarms.length === 0 ? (
        <p className="no-data-message">Kh√¥ng t√¨m th·∫•y c∆° s·ªü n√†o.</p>
      ) : (
        <>
          <div className="table-responsive">
            <table className="farm-table">
              <thead>
                <tr>
                  <th>T√™n c∆° s·ªü</th>
                  <th>ƒê·ªãa ch·ªâ</th>
                  <th>T·ªânh/Th√†nh ph·ªë</th>
                  <th>Ng∆∞·ªùi ƒë·∫°i di·ªán</th>
                  <th>Lo·∫°i h√¨nh ƒëƒÉng k√Ω</th>
                </tr>
              </thead>
              <tbody>
                {filteredFarms.map((f) => (
                  <tr key={f._id} onClick={() => navigate(`/admin/woods/${f._id}`)} style={{cursor: 'pointer'}}>
                    {/* --- FIX: S·ª≠a l·∫°i t√™n tr∆∞·ªùng cho ƒë√∫ng --- */}
                    <td>{f.tenCoSo}</td>
                    <td>{f.diaChiCoSo}</td>
                    <td>{f.tinhThanhPho}</td>
                    <td>{f.tenNguoiDaiDien}</td>
                    <td>{f.loaiCoSoDangKy || 'N/A'}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* --- NEW: Kh·ªëi ƒëi·ªÅu khi·ªÉn ph√¢n trang --- */}
          <div className="pagination-controls">
            <button
              onClick={() => handlePageChange(page - 1)}
              disabled={page <= 1}
            >
              &laquo; Trang tr∆∞·ªõc
            </button>
            <span>Trang {page} / {totalPages}</span>
            <button
              onClick={() => handlePageChange(page + 1)}
              disabled={page >= totalPages}
            >
              Trang sau &raquo;
            </button>
          </div>
        </>
      )}
    </div>
  );
}

export default FarmListPage;