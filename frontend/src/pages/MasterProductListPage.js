import React, { useState, useEffect, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import './MasterProductListPage.css';

// L·∫•y URL API t·ª´ bi·∫øn m√¥i tr∆∞·ªùng.
// N·∫øu bi·∫øn m√¥i tr∆∞·ªùng kh√¥ng t·ªìn t·∫°i (v√≠ d·ª•: trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn c·ª•c b·ªô),
// n√≥ s·∫Ω m·∫∑c ƒë·ªãnh d√πng localhost:10000.
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:10000'; // Th√™m d√≤ng n√†y

function MasterProductListPage() {
    const navigate = useNavigate();
    const [masterData, setMasterData] = useState([]);
    const [loading, setLoading] = useState(true);
    const [filters, setFilters] = useState({
        tenCoSo: '',
        tinhThanhPho: '',
        tenLamSan: '',
        trangThai: ''
    });

    useEffect(() => {
        const token = localStorage.getItem('token');
        if (!token) {
            navigate('/login');
        } else {
            fetchMasterData(token);
        }
    }, [navigate]);

    const fetchMasterData = async (token) => {
        setLoading(true);
        try {
            // S·ª≠a ƒë·ªïi: S·ª≠ d·ª•ng API_BASE_URL cho cu·ªôc g·ªçi API
            const response = await axios.get(`${API_BASE_URL}/api/master-product-list`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            setMasterData(response.data);
        } catch (err) {
            console.error("L·ªói khi g·ªçi API:", err.response || err.message);
            // C√≥ th·ªÉ mu·ªën hi·ªÉn th·ªã m·ªôt th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng ·ªü ƒë√¢y
        } finally {
            setLoading(false);
        }
    };

    const handleFilterChange = (e) => {
        const { name, value } = e.target;
        setFilters(prev => ({ ...prev, [name]: value }));
    };

    const filteredData = useMemo(() => {
        return masterData.filter(item => {
            return (
                (filters.tenCoSo ? item.tenCoSo?.toLowerCase().includes(filters.tenCoSo.toLowerCase()) : true) &&
                (filters.tinhThanhPho ? item.tinhThanhPho?.toLowerCase().includes(filters.tinhThanhPho.toLowerCase()) : true) &&
                (filters.tenLamSan ? item.tenLamSan?.toLowerCase().includes(filters.tenLamSan.toLowerCase()) : true) &&
                (filters.trangThai ? item.trangThai === filters.trangThai : true)
            );
        });
    }, [filters, masterData]);

    if (loading) {
        return <div className="master-list-container"><p>ƒêang t·∫£i d·ªØ li·ªáu, vui l√≤ng ch·ªù...</p></div>;
    }

    return (
        <div className="master-list-container">
            <h1>üìã B·∫¢NG T·ªîNG H·ª¢P C∆† S·ªû V√Ä L√ÇM S·∫¢N üìã</h1>
			<div className="filters-panel">
                <input type="text" name="tenCoSo" placeholder="L·ªçc theo t√™n c∆° s·ªü..." onChange={handleFilterChange} value={filters.tenCoSo} />
                <input type="text" name="tinhThanhPho" placeholder="L·ªçc theo t·ªânh (TP)..." onChange={handleFilterChange} value={filters.tinhThanhPho} />
                <input type="text" name="tenLamSan" placeholder="L·ªçc theo t√™n l√¢m s·∫£n..." onChange={handleFilterChange} value={filters.tenLamSan} />
                <select name="trangThai" onChange={handleFilterChange} value={filters.trangThai}>
                    <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                    <option value="ƒêang ho·∫°t ƒë·ªông">ƒêang ho·∫°t ƒë·ªông</option>
                    <option value="ƒê√£ ƒë√≥ng c·ª≠a">ƒê√£ ƒë√≥ng c·ª≠a</option>
                    <option value="T·∫°m d·ª´ng">T·∫°m ng∆∞ng</option>
                </select>
            </div>

            <div className="table-wrapper">
                <table className="master-table">
                    <thead>
                        <tr>
                            <th>T√™n L√¢m s·∫£n</th>
                            <th>Kh·ªëi l∆∞·ª£ng</th>
                            <th>ƒê∆°n v·ªã</th>
                            <th>Ngu·ªìn g·ªëc G·ªó</th>
                            <th>Ng√†y ƒêƒÉng k√Ω</th>
                            <th>T√™n C∆° s·ªü</th>
                            <th>T·ªânh (TP)</th>
                            <th>ƒê·ªãa ch·ªâ</th>
                            <th>Tr·∫°ng th√°i</th>
                            <th>Ng∆∞·ªùi ƒë·∫°i di·ªán</th>
                            <th>S·ªë CCCD</th>
                        </tr>
                    </thead>
                    <tbody>
                        {filteredData.length > 0 ? filteredData.map(item => (
                            <tr key={item._id || item.farmId + item.tenLamSan}>
                                <td className="highlight-col">{item.tenLamSan}</td>
                                <td>{item.khoiLuong}</td>
                                <td>{item.donViTinh}</td>
                                <td>{item.nguonGocGo}</td>
                                <td>{item.ngayDangKyLamSan ? new Date(item.ngayDangKyLamSan).toLocaleDateString() : ''}</td>
                                <td className="highlight-col">{item.tenCoSo}</td>
                                <td>{item.tinhThanhPho}</td>
                                <td>{item.diaChiCoSo}</td>
                                <td>{item.trangThai}</td>
                                <td>{item.tenNguoiDaiDien}</td>
                                <td>{item.soCCCD}</td>
                            </tr>
                        )) : (
                            <tr>
                                <td colSpan="11" style={{ textAlign: 'center' }}>Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p.</td>
                            </tr>
                        )}
                    </tbody>
                </table>
            </div>
        </div>
    );
}

export default MasterProductListPage;