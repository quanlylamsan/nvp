import React, { useEffect, useState, useMemo, useCallback } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import * as XLSX from 'xlsx';

import './RegisterManageSub2Page.css';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:10000';

// C·∫•u h√¨nh c·ªôt ban ƒë·∫ßu
const initialColumnsConfig = {
    tenCoSo: { id: 'tenCoSo', label: 'T√™n c∆° s·ªü', visible: true, minWidth: '180px' },
    loaiCoSoDangKy: { id: 'loaiCoSoDangKy', label: 'Lo·∫°i C∆° S·ªü', visible: true, minWidth: '180px' },
    tinhThanhPho: { id: 'tinhThanhPho', label: 'T·ªânh (TP)', visible: true, minWidth: '100px' },
    xaPhuong: { id: 'xaPhuong', label: 'X√£ (Ph∆∞·ªùng)', visible: true, minWidth: '100px' },
    diaChiCoSo: { id: 'diaChiCoSo', label: 'ƒê·ªãa ch·ªâ c∆° s·ªü', visible: true, minWidth: '220px' },
    tenNguoiDaiDien: { id: 'tenNguoiDaiDien', label: 'Ng∆∞·ªùi ƒë·∫°i di·ªán', visible: true, minWidth: '150px' },
    trangThai: { id: 'trangThai', label: 'Tr·∫°ng th√°i', visible: true, minWidth: '100px' },
    actions: { id: 'actions', label: 'H√†nh ƒë·ªông', visible: true, width: '220px', minWidth: '220px' },
    vido: { id: 'vido', label: 'Vƒ© ƒë·ªô', visible: false, minWidth: '80px' },
    kinhdo: { id: 'kinhdo', label: 'Kinh ƒë·ªô', visible: false, minWidth: '80px' },
    ngayThanhLap: { id: 'ngayThanhLap', label: 'Ng√†y th√†nh l·∫≠p', visible: false, minWidth: '100px' },
    giayPhepKinhDoanh: { id: 'giayPhepKinhDoanh', label: 'S·ªë GPKD', visible: false, minWidth: '100px' },
};

function BreedingFarmListPage() {
    // === PH·∫¶N KHAI B√ÅO STATE ===
    const [allFarms, setAllFarms] = useState([]); // State l∆∞u tr·ªØ TO√ÄN B·ªò danh s√°ch t·ª´ API
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // States cho c√°c b·ªô l·ªçc
    const [filter, setFilter] = useState('');
    const [selectedProvince, setSelectedProvince] = useState('');
    const [selectedTrangThai, setSelectedTrangThai] = useState('');
    const [selectedLoaiCoSoDangKy, setSelectedLoaiCoSoDangKy] = useState('ƒêƒÉng k√Ω c∆° s·ªü g√¢y nu√¥i ƒë·ªông v·∫≠t');

    // States cho c√°c gi√° tr·ªã duy nh·∫•t trong b·ªô l·ªçc
    const [uniqueProvinces, setUniqueProvinces] = useState([]);
    const [uniqueTrangThai, setUniqueTrangThai] = useState([]);

    const navigate = useNavigate();
    const token = localStorage.getItem('token');

    // States cho b·∫£ng v√† ph√¢n trang
    const [columns, setColumns] = useState(initialColumnsConfig);
    const [showColumnOptions, setShowColumnOptions] = useState(false);
    const [currentPage, setCurrentPage] = useState(1);
    const [itemsPerPage, setItemsPerPage] = useState(15);

    // === PH·∫¶N QU·∫¢N L√ù C·ªòT (L∆∞u v√† t·∫£i t·ª´ localStorage) ===
    useEffect(() => {
        try {
            const savedColumns = localStorage.getItem('tableColumnsVisibility_BreedingFarms'); // Key duy nh·∫•t cho trang n√†y
            if (savedColumns) {
                const parsedSavedColumns = JSON.parse(savedColumns);
                const mergedColumns = Object.keys(initialColumnsConfig).reduce((acc, key) => {
                    const savedCol = parsedSavedColumns.find(sCol => sCol.id === key);
                    acc[key] = savedCol ? { ...initialColumnsConfig[key], visible: savedCol.visible } : initialColumnsConfig[key];
                    return acc;
                }, {});
                setColumns(mergedColumns);
            }
        } catch (err) {
            console.error("L·ªói khi t·∫£i tr·∫°ng th√°i c·ªôt t·ª´ localStorage:", err);
            setColumns(initialColumnsConfig);
        }
    }, []);

    useEffect(() => {
        try {
            const columnsToSave = Object.values(columns).map(({ id, visible }) => ({ id, visible }));
            localStorage.setItem('tableColumnsVisibility_BreedingFarms', JSON.stringify(columnsToSave));
        } catch (err) {
            console.error("L·ªói khi l∆∞u tr·∫°ng th√°i c·ªôt v√†o localStorage:", err);
        }
    }, [columns]);

    // === PH·∫¶N T·∫¢I D·ªÆ LI·ªÜU (T·ªëi ∆∞u: Ch·ªâ g·ªçi API m·ªôt l·∫ßn) ===
    useEffect(() => {
        const fetchAllFarms = async () => {
            if (!token) {
                navigate('/');
                return;
            }
            setLoading(true);
            setError(null);
            try {
                const response = await axios.get(`${API_BASE_URL}/api/farms`, {
                    headers: { Authorization: `Bearer ${token}` },
                    params: {
                        farmType: 'ƒêƒÉng k√Ω c∆° s·ªü g√¢y nu√¥i ƒë·ªông v·∫≠t',
                        limit: 2000 // L·∫•y m·ªôt l∆∞·ª£ng l·ªõn d·ªØ li·ªáu ƒë·ªÉ x·ª≠ l√Ω ·ªü client
                    }
                });
                const fetchedData = response.data || [];
                if (Array.isArray(fetchedData)) {
                    setAllFarms(fetchedData);
                    // T·ªëi ∆∞u: L·∫•y gi√° tr·ªã duy nh·∫•t cho b·ªô l·ªçc t·ª´ d·ªØ li·ªáu v·ª´a t·∫£i v·ªÅ
                    setUniqueProvinces([...new Set(fetchedData.map(f => f.tinhThanhPho).filter(Boolean))].sort());
                    setUniqueTrangThai([...new Set(fetchedData.map(f => f.trangThai).filter(Boolean))].sort());
                } else {
                    setError("ƒê·ªãnh d·∫°ng d·ªØ li·ªáu t·ª´ server kh√¥ng ƒë√∫ng.");
                    setAllFarms([]);
                }
            } catch (err) {
                console.error("L·ªói khi l·∫•y danh s√°ch c∆° s·ªü:", err);
                setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch c∆° s·ªü. Vui l√≤ng th·ª≠ l·∫°i.');
                if (err.response && (err.response.status === 401 || err.response.status === 403)) {
                    navigate('/');
                }
            } finally {
                setLoading(false);
            }
        };
        fetchAllFarms();
    }, [token, navigate]);

    // === PH·∫¶N L·ªåC D·ªÆ LI·ªÜU (T·ªëi ∆∞u: L·ªçc ·ªü client-side) ===
    const filteredFarms = useMemo(() => {
        return allFarms.filter(f => {
            const searchLower = filter.toLowerCase();
            // Logic t√¨m ki·∫øm chung ƒë∆°n gi·∫£n h∆°n
            const generalMatch = !filter || Object.values(f).some(val =>
                String(val).toLowerCase().includes(searchLower)
            );
            const provinceMatch = !selectedProvince || f.tinhThanhPho === selectedProvince;
            const trangThaiMatch = !selectedTrangThai || selectedTrangThai === 'all' || f.trangThai === selectedTrangThai;

            return generalMatch && provinceMatch && trangThaiMatch;
        });
    }, [allFarms, filter, selectedProvince, selectedTrangThai]);


    // === PH·∫¶N H√ÄNH ƒê·ªòNG V√Ä PH√ÇN TRANG ===
    const handleDelete = useCallback(async (id) => {
        if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c∆° s·ªü n√†y?')) {
            try {
                await axios.delete(`${API_BASE_URL}/api/farms/${id}`, {
                    headers: { Authorization: `Bearer ${token}` }
                });
                setAllFarms(prev => prev.filter(f => f._id !== id));
            } catch (error) {
                console.error('L·ªói khi x√≥a:', error);
                alert('X√≥a th·∫•t b·∫°i!');
            }
        }
    }, [token]);

    const handleEdit = (id) => navigate(`/edit-farm/${id}`);
    const handleView = (id) => navigate(`/farm-details/${id}`);
	const handleAddProduct = (farmId) => navigate(`/farm/${farmId}/add-product`);
    const currentItems = filteredFarms.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);
    const totalPages = Math.ceil(filteredFarms.length / itemsPerPage);

    const paginate = (pageNumber) => setCurrentPage(pageNumber);
    const nextPage = () => { if (currentPage < totalPages) { setCurrentPage(currentPage + 1); } };
    const prevPage = () => { if (currentPage > 1) { setCurrentPage(currentPage - 1); } };
    const handleColumnToggle = (columnKey) => {
        setColumns(prev => ({ ...prev, [columnKey]: { ...prev[columnKey], visible: !prev[columnKey].visible } }));
    };
    const handleSelectAllColumns = () => {
        setColumns(prev => {
            const newCols = { ...prev };
            Object.keys(newCols).forEach(key => newCols[key].visible = true);
            return newCols;
        });
    };
    const handleDeselectAllColumns = () => {
        setColumns(prev => {
            const newCols = { ...prev };
            Object.keys(newCols).forEach(key => newCols[key].id !== 'actions' ? newCols[key].visible = false : newCols[key].visible = true);
            return newCols;
        });
    };

    const handleExportExcel = () => {
        const columnsToExport = Object.values(columns).filter(col => col.visible && col.id !== 'actions');
        const dataToExport = filteredFarms.map(farm => {
            const rowData = {};
            columnsToExport.forEach(col => {
                let value = farm[col.id];
                if (['ngayThanhLap', 'ngayCapCCCD'].includes(col.id)) {
                    value = value ? new Date(value).toLocaleDateString() : '';
                }
                rowData[col.label] = value;
            });
            return rowData;
        });
        if (dataToExport.length === 0) {
            alert("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t Excel.");
            return;
        }
        const ws = XLSX.utils.json_to_sheet(dataToExport);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "DanhSachCoSoGayNuoi");
        XLSX.writeFile(wb, "DanhSachCoSoGayNuoi.xlsx");
    };

    // === PH·∫¶N HI·ªÇN TH·ªä (RENDER) ===
    if (loading) return <div className="farm-list-container"><h2>ƒêang t·∫£i danh s√°ch c∆° s·ªü...</h2></div>;
    if (error) return <div className="farm-list-container"><h2 style={{ color: 'red' }}>L·ªói: {error}</h2></div>;

    return (
        <div className="farm-list-container">
            <h2>üìã Danh s√°ch C∆° s·ªü g√¢y nu√¥i ƒë·ªông v·∫≠t</h2>
            <div className="filter-container">
                <input
                    type="text"
                    placeholder="üîç T√¨m ki·∫øm chung..."
                    value={filter}
                    onChange={e => setFilter(e.target.value)}
                />
                <select value={selectedProvince} onChange={e => setSelectedProvince(e.target.value)}>
                    <option value="">T·∫•t c·∫£ T·ªânh (TP)</option>
                    {uniqueProvinces.map(p => (<option key={p} value={p}>{p}</option>))}
                </select>
                <select value={selectedTrangThai} onChange={e => setSelectedTrangThai(e.target.value)}>
                    <option value="" disabled>Ch·ªçn tr·∫°ng th√°i</option>
                    <option value="all">T·∫•t c·∫£ Tr·∫°ng th√°i</option>
                    {uniqueTrangThai.map(s => (<option key={s} value={s}>{s}</option>))}
                </select>
                <button onClick={() => setShowColumnOptions(!showColumnOptions)} className="toggle-columns-button">
                    {showColumnOptions ? '·∫®n t√πy ch·ªçn' : 'Hi·ªán/·∫®n C·ªôt'}
                </button>
                <button onClick={handleExportExcel} className="export-excel-button">Xu·∫•t Excel</button>
            </div>

            {showColumnOptions && (
                <div className="column-options-container">
                    <h3>Ch·ªçn c·ªôt hi·ªÉn th·ªã:</h3>
                    <div className="column-options-grid">
                        {Object.keys(columns).map(key => (
                            <label key={key}>
                                <input type="checkbox" checked={columns[key].visible} onChange={() => handleColumnToggle(key)} />
                                {columns[key].label}
                            </label>
                        ))}
                    </div>
                    <div className="column-control-buttons">
                        <button onClick={handleSelectAllColumns}>Ch·ªçn t·∫•t c·∫£</button>
                        <button onClick={handleDeselectAllColumns}>B·ªè ch·ªçn t·∫•t c·∫£</button>
                    </div>
                </div>
            )}

            {filteredFarms.length === 0 ? (
                <p>Kh√¥ng c√≥ c∆° s·ªü n√†o ph√π h·ª£p.</p>
            ) : (
                <>
                    <table className="farm-table">
                        <thead>
                            <tr>
                                {Object.values(columns).map(col => col.visible && (
                                    <th key={col.id} style={{ minWidth: col.minWidth }}>{col.label}</th>
                                ))}
                            </tr>
                        </thead>
                        <tbody>
                            {currentItems.map((item) => (
                                <tr key={item._id}>
                                    {Object.values(columns).map(col => col.visible && (
						<td key={col.id}>
 						   {col.id === 'actions' ? (
 						     <div className="action-buttons-cell">
 						       <button
  						        onClick={() => handleView(item._id)}
 						         className="action-button view-button"
 						         title="Xem chi ti·∫øt"
						        >üëÅÔ∏è</button>

 						       <button
 						         onClick={() => handleEdit(item._id)}
 						         className="action-button edit-button"
						          title="Ch·ªânh s·ª≠a"
 						       >‚úèÔ∏è</button>

 						       {false && (
						          <button
 						           onClick={() => handleDelete(item._id)}
						            className="action-button delete-button"
  						          title="Xo√°"
  						        >üóëÔ∏è</button> // T·∫°m ·∫©n
 						       )}

 						       <button
 						         onClick={() => handleAddProduct(item._id)}
 						         className="action-button add-product-button"
 						         title="Th√™m L√¢m s·∫£n m·ªõi"
						        >
						          ‚ûïüå≤
 						       </button>
 						     </div>
						    ) : col.id === 'products' ? (
 						     item.products?.map(p => p.tenLamSan).join(', ') || 'Ch∆∞a c√≥'
						    ) : (
 						     ['ngayThanhLap', 'ngayCapCCCD'].includes(col.id)
						        ? (item[col.id] ? new Date(item[col.id]).toLocaleDateString() : '')
 						       : item[col.id]
 						   )}
						  </td>
						))}

                                </tr>
                            ))}
                        </tbody>
                    </table>
                    <div className="pagination-container">
                        <div className="pagination-info">
                            {((currentPage - 1) * itemsPerPage) + 1} - {Math.min(currentPage * itemsPerPage, filteredFarms.length)} / {filteredFarms.length} b·∫£n ghi
                        </div>
                        <div className="pagination-controls">
                            <button onClick={prevPage} disabled={currentPage === 1} className="pagination-button">¬´</button>
                            {Array.from({ length: totalPages }, (_, i) => (
                                <button
                                    key={i + 1}
                                    onClick={() => paginate(i + 1)}
                                    className={`pagination-button ${currentPage === i + 1 ? 'active' : ''}`}
                                >
                                    {i + 1}
                                </button>
                            ))}
                            <button onClick={nextPage} disabled={currentPage === totalPages} className="pagination-button">¬ª</button>
                        </div>
                        <div className="items-per-page">
                            <select value={itemsPerPage} onChange={(e) => {
                                setItemsPerPage(Number(e.target.value));
                                setCurrentPage(1);
                            }}>
                                <option value="5">5 b·∫£n ghi/trang</option>
                                <option value="10">10 b·∫£n ghi/trang</option>
                                <option value="15">15 b·∫£n ghi/trang</option>
                                <option value="20">20 b·∫£n ghi/trang</option>
                                <option value="50">50 b·∫£n ghi/trang</option>
                            </select>
                        </div>
                    </div>
                </>
            )}
        </div>
    );
}

export default BreedingFarmListPage;
